declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)

@str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.4 = private unnamed_addr constant [10 x i8] c"19182620\0A\00", align 1
@str.5 = private unnamed_addr constant [10 x i8] c"19182620\0A\00", align 1
@str.6 = private unnamed_addr constant [10 x i8] c"19182620\0A\00", align 1
define dso_local void @de() {
	ret void
}
define dso_local i32 @keke(i32 %0, i32 %1) {
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = add nsw i32 %5, %6
	store i32 %7, i32* %3
	ret i32 0
}
define dso_local i32 @jian() {
	%1 = alloca i32
	%2 = alloca i32
	%3 = alloca i32
	%4 = call i32 @getint()
	store i32 %4, i32* %1
	%5 = call i32 @getint()
	store i32 %5, i32* %2
	%6 = load i32, i32* %1
	%7 = load i32, i32* %2
	%8 = sub nsw i32 %6, %7
	store i32 %8, i32* %3
	%9 = load i32, i32* %3
	ret i32 %9
}
define dso_local i32 @main() {
	%1 = alloca i32
	%2 = alloca i32
	%3 = alloca i32
	%4 = alloca i32
	%5 = alloca i32
	%6 = alloca i32
	%7 = alloca i32
	store i32 1, i32* %7
	%8 = alloca i32
	%9 = alloca i32
	%10 = alloca i32
	%11 = alloca i32
	%12 = alloca i32
	store i32 -1, i32* %12
	%13 = alloca i32
	store i32 2, i32* %13
	%14 = alloca i32
	%15 = alloca i32
	%16 = alloca i32
	store i32 0, i32* %16
	%17 = load i32, i32* %3
	%18 = load i32, i32* %4
	%19 = icmp eq i32 %17, %18
	br i1 %19, label %20, label %40

20:
	%21 = load i32, i32* %4
	%22 = load i32, i32* %5
	%23 = icmp sge i32 %21, %22
	br i1 %23, label %24, label %39

24:
	%25 = load i32, i32* %5
	%26 = load i32, i32* %6
	%27 = icmp sle i32 %25, %26
	br i1 %27, label %28, label %38

28:
	%29 = load i32, i32* %6
	%30 = load i32, i32* %7
	%31 = icmp ne i32 %29, %30
	br i1 %31, label %32, label %37

32:
	%33 = load i32, i32* %3
	%34 = icmp sgt i32 %33, 1
	br i1 %34, label %35, label %36

35:
	store i32 1, i32* %1
	br label %36

36:
	br label %37

37:
	br label %38

38:
	br label %39

39:
	br label %40

40:
	%41 = load i32, i32* %1
	%42 = load i32, i32* %2
	%43 = call i32 @keke(i32 %41, i32 %42)
	%44 = load i32, i32* %4
	%45 = load i32, i32* %5
	%46 = load i32, i32* %6
	%47 = load i32, i32* %7
	call void @putint(i32 %44)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str, i64 0, i64 0))
	call void @putint(i32 %45)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.1, i64 0, i64 0))
	call void @putint(i32 %46)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.2, i64 0, i64 0))
	call void @putint(i32 %47)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.3, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.4, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.5, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.6, i64 0, i64 0))
	ret i32 0
}
