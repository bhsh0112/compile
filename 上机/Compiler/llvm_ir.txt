declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)

@str = private unnamed_addr constant [7 x i8] c"round \00", align 1
@str.1 = private unnamed_addr constant [3 x i8] c": \00", align 1
@str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
define dso_local i32 @main() {
	%1 = alloca i32
	store i32 1, i32* %1
	%2 = alloca i32
	%3 = load i32, i32* %1
	store i32 %3, i32* %2
	%4 = alloca i32
	%5 = alloca i32
	%6 = alloca i32
	%7 = call i32 @getint()
	store i32 %7, i32* %5
	%8 = load i32, i32* %1
	%9 = load i32, i32* %1
	%10 = mul nsw i32 %8, %9
	store i32 %10, i32* %6
	br label %11

11:
	%12 = load i32, i32* %6
	%13 = load i32, i32* %5
	%14 = add nsw i32 %13, 1
	%15 = icmp slt i32 %12, %14
	br i1 %15, label %16, label %36

16:
	%17 = load i32, i32* %2
	store i32 %17, i32* %4
	%18 = load i32, i32* %1
	%19 = load i32, i32* %2
	%20 = add nsw i32 %18, %19
	store i32 %20, i32* %2
	%21 = load i32, i32* %4
	store i32 %21, i32* %1
	%22 = load i32, i32* %6
	%23 = srem i32 %22, 2
	%24 = icmp eq i32 %23, 1
	br i1 %24, label %25, label %26

25:
	br label %33
	br label %26

26:
	%27 = load i32, i32* %6
	%28 = load i32, i32* %1
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str, i64 0, i64 0))
	call void @putint(i32 %27)
	call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.1, i64 0, i64 0))
	call void @putint(i32 %28)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.2, i64 0, i64 0))
	%29 = load i32, i32* %6
	%30 = icmp sgt i32 %29, 19
	br i1 %30, label %31, label %32

31:
	br label %36
	br label %32

32:
	br label %33

33:
	%34 = load i32, i32* %6
	%35 = add nsw i32 %34, 1
	store i32 %35, i32* %6
	br label %11

36:
	ret i32 0
}
